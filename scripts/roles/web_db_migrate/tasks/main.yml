---

#---------------------------------------------------
# RUN FROM IN UBUNTU VM
#---------------------------------------------------
# - setup AWS access from ubuntu
# - setup terraform, ansible, python, boto, botocore

# ---Need to update tr_git_address for ansible pull
# include the folder ansible_pull/main.yaml in io.tf file

####################################################
####################################################



# tasks file for dbmigrate

# ansible pull: wordpress role replaces wp-config with new file, however we wish to update that file
# need IAM Policy (in terraform) for rds to access s3 bucket, see other tab
# need IAM policy (in terraform) to list, getbucketlocation, put and Get objects from the mm-migration-backup bucket
# update aws_db_instance
# ansible pull: copy wordpress (var/www/wordpress) contents of s3 bucket to server
# website -> comments on 1) terraform policy 2) terraform s3_import 3) ansible role 4) new ansible pull
# need to copy images to S3 bucket used for cloudfront

# add list to website comment
    # Local exec provisioner
    # get aws credentials from vault
    # Back up your website files to s3
    # Export The WordPress Database using percona xtrabackup and backup on S3
    # Create RDS & import db from s3
    # Edit the wp-config.php File with ansible
    # Import Your Database
    # Upload The WordPress Files from s3 to Ec2
    # Defining New Domain & Search/Replace Old Domain

# cannot import to db.t2.micro. But can change instance class later
# need to determine type of db instance required for import  and document
# need to add s3_import code to description section of terraform and describe it

# Local exec provisioner to run this role prior to setup

# S3 buckets
# DB -> mm-migration-db-backup
#  Web -> mm-migration-web-backup


# remember to copy web_db_migrate to scripts/roles

# what about IAM permissions for mac laptop to be able to upload files to S3??

# consider changing buckets to private read

# two modes for wordpress role 1) fresh new install 2) db and www import

# user accounts are not imported. Maybe create a new admin user


# Move apache files to S3 Bucket
- name: Compress directory
  archive:
    path:
      - "{{ www_dir }}/*"
      - "{{ www_dir }}/.*"
    dest: "/{{ dest_dir }}/{{ backup_file }}"

- name: get Vault aws secret credentials
  set_fact:
    aws_cred: "{{ lookup('hashi_vault', 'secret=kv/aws token={{ vault_token }} url=https://{{ vault_server }}:8200 validate_certs=false') }}"

- name: put web server files in s3 bucket
  aws_s3:
    aws_access_key: "{{ aws_cred.AWS_ACCESS_KEY_ID }}"
    aws_secret_key: "{{ aws_cred.AWS_SECRET_ACCESS_KEY }}"
    bucket: "{{ s3_bucket_backup }}"
    object: "/{{ www_prefix }}/{{ backup_file }}"
    src: "/{{ dest_dir }}/{{ backup_file }}"
    mode: put
  become: true

# move images to s3 bucket used for cloudfront
- name: put web images in S3 bucket
  s3_sync:
    aws_access_key: "{{ aws_cred.AWS_ACCESS_KEY_ID }}"
    aws_secret_key: "{{ aws_cred.AWS_SECRET_ACCESS_KEY }}"
    bucket: "{{ s3bucket_media }}"
    file_root: "{{ www_dir }}/wp-content/uploads"

# backup db and move to s3 bucket
- name: "Adding percona repository"
  apt_repository:
    repo: "deb http://repo.percona.com/apt {{ ansible_distribution_release }} main"
    state: "present"

- name: update apt cache
  become: true
  apt:
    update_cache: yes

- name: install percona
  become: true
  apt:
    name: "percona-xtrabackup"
    state: present

- name: perform percona backup
  command: "xtrabackup --backup --datadir={{ mysql_dir }} --target-dir={{ percona_target_dir }}"
  become: true

- name: put percona backup files in s3 bucket
  s3_sync:
    aws_access_key: "{{ aws_cred.AWS_ACCESS_KEY_ID }}"
    aws_secret_key: "{{ aws_cred.AWS_SECRET_ACCESS_KEY }}"
    bucket: "{{ s3_bucket_backup }}"
    file_root: "{{ percona_target_dir }}"
    key_prefix: "/{{ db_prefix }}"
